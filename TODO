lazy { a * b } -> lazy { |i,j| lazy { |i,j| a[i,j] * b[i,j] }[i,j] } # ?
lazy { s } -> s
lazy { -s } -> lazy { |i| -s[i] }
lazy { |i,j| s[i,j] }
lazy { |i| lazy { |j| s[i,j] } }
lazy( n ) { |i| i }
lazy( n, m ) { |i,j| i + j }
lazy( n ) { |i| lazy( m ) { |j| i + j } }
eager( n ) { |i| i }
...

tensor indices to enable transpose of lazy array
ranges (rolling, lazy rolling, lazy ranges)
test lazyness
sums/injections (equality for arrays)? nesting? tensors?
JIT?
test type conversions
fancy README

a = lazy( 16 ) { |i| i }
a = lazy( 16 ) { |i| i }[ 4 ... 12 ]  # offsets: apply sel-operation to all
                                        members; index array?
a = lazy( 16, 32 ) { |i,j| Sequence[ i, j ] } # ???
a = lazy( 8, 8 ) { |i,j| Sequence[ i, a[j] * sin( i + b[j] ) ] }.hist 8, 8
a = b.class.new.op { |x| set -x }
a = lazy { |i| -b[i] }
a = lazy { -b }
a = array { -b }
a = array { |i| -b[i] }
a = array( :dim => [ b.size ] ) { |i| -b[i] }
a = -b
array { |i| sum { |j| a[i,j] } }
lazy { |i| sum { |j| a[i,j] } }
parallel { ... }
lazy { |i| lazy { |j| a[i,j] } }
array { lazy { |i| sum { |j| a[i,j] } } }

correlate?

lines:
[ i, a[j] * sin( i + b[j] ) ].hist

lines:
lazy { |i,j| i.zip( a[j] * sin( i + b[j] ) ) }.histogram 32, 20

lines:
lazy { |i,j| Sequence[ i, a[j] * sin( i + b[j] ) ] }.histogram 32, 20
combined histograms?

circle:
[ sin( i ) * r, cos( i ) * r ].hist

Geometric Hashing? Bounded Hough Transform!!! RANSAC? histogram weights?

array: lazy retrieval? jit code for address computation
OBJECT: object with type information
Lazy( Sequence( INT, 3 ) )

interpretation: type coercion, actual operation, jit,
collection of jit arguments (e.g. tensor)

proc { |i| proc { |j| i+j } }.call( 5 ).call 3

gem install flay: http://ruby.sadi.st/Flay.html

How to nest/cascade mode-environments?
(how to specify nested modes for recursive algorithms and called algorithms?)
ruby and jit compiles, lazy and parallel forwards

* Ruby
* Lazy (Lazy histogram -> hough transform, lazy transpose, unused indices?)
* Multithreading
* JIT
* GCC
